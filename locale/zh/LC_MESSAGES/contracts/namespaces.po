# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, RChain Cooperative
# This file is distributed under the same license as the RChain Architecture
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: RChain Architecture 0.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-18 16:26+0800\n"
"PO-Revision-Date: 2018-03-14 18:58+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.0.6\n"
"Language: zh\n"

#: ../../contracts/namespaces.rst:5
msgid "Namespace Logic"
msgstr "命名空间逻辑"

#: ../../contracts/namespaces.rst:7
msgid ""
"For a blockchain solution of internet scale to be realizable, it, like "
"the internet, must possess a logic to reason about the “location” of a "
"resource. Specifically, how do we reference a resource? How do we "
"determine which agents can access that resource under what conditions? "
"In contrast to many other blockchains, where addresses are flat public "
"keys (or hashes thereof), RChain’s virtual address space will be "
"partitioned into namespaces. **In a very general explanation, a "
"namespace is a set of named channels.** Because channels are quite often "
"implemented as data stores, a namespace is equivalently a set of "
"contentious resources."
msgstr ""
"为了实现互联网规模的区块链解决方案，必须像互联网一样拥有推理出资源“位"
"置”的逻辑。具体来说，我们如何引用资源？我们如何确定哪些代理可以在什么条件"
"下访问该资源？与其他地址（公钥）只有一个维度的区块链相比，RChain的虚拟地"
"址空间将被分割成多个命名空间。 **在一个非常大体的解释中，命名空间是一组命"
"名通道。** 因为通道常常被实现作为数据存储，所以命名空间相当于一个有争议资"
"源的集合。"

#: ../../contracts/namespaces.rst
msgid "Q & A: Namespaces and double-spending"
msgstr "问答：命名空间和双花问题"

#: ../../contracts/namespaces.rst:11
msgid ""
"Q: Suppose Alice, Bob, and Carol are each in distinct namespaces and we "
"have two payments: Alice-to-Bob and Alice-to-Carol.  If I'm a node that "
"only wants to care about Alice, how can I know that Alice doesn't double-"
"spend?"
msgstr ""
"问：假设Alice，Bob和Carol在相互不同的命名空间中，发生了两笔付款：Alice付"
"给Bob和Alice付给Carol。假设我是一个只关心Alice的节点，我如何确定Alice不会"
"双重花费？"

#: ../../contracts/namespaces.rst:16
msgid ""
"A: A namespace is just a collection of names. All blockchain addresses "
"are names.  A collection can be described in a few ways. One of them is "
"extensionally by explicitly spelling out each item in the collection.  "
"Another way is intensionally by providing a rule or program that either "
"generates the collection or recognizes when an item is in the collection "
"or out of the collection.  The more interesting namespaces are the "
"intensionally specified ones."
msgstr ""
"答：命名空间只是一组名称。所有的区块链地址都是名称。一个集合可以用几种方"
"式来描述。其中之一是在外部明确地写出集合中的每个项目。另一种方式是内在性"
"地提供一个规则或程序，或者用于生成集合，或者识别一个物品是否在集合中。第"
"二类命名空间更有意思。"

#: ../../contracts/namespaces.rst:24
msgid ""
"Now, the next step is to relate those to users, contracts, and nodes.  "
"Both users and contracts interact with each other via names.  Nodes "
"verify transactions in given namespaces, and transactions are i/o events "
"across names ( which are used as channels ). Any transaction that "
"involves two separate namespaces must be served by a collection of nodes "
"that handles those namespaces.  If there are no nodes that handle "
"transactions that combine the namespaces, then the transaction cannot "
"happen."
msgstr ""
"现在，下一步是将这些与用户，合约以及节点联系起来。用户和合约都通过名称相"
"互通信。节点验证给定的命名空间中的事务，事务是跨名字（通道）间的I/O事件。"
"任何涉及到两个独立命名空间的事务都必须由处理这些命名空间的节点集合来处"
"理。如果处理这些事务的结点不能组合成命名空间，则该事务将不能发生。"

#: ../../contracts/namespaces.rst:33
msgid ""
"If there are nodes that combine the namespaces, then the consensus "
"algorithm guarantees that all the nodes agree on the transactions. More "
"specifically, they agree on the winners of every race.  Thus, there can "
"never be double spend.  The biggest threat is to find composite "
"namespaces that is served by few validators.  Fortunately, you can see "
"the validator power behind a namespace and decide whether to trust that "
"namespace."
msgstr ""
"如果有多个节点组合这些命名空间，那么一致性算法可以保证所有节点都同意该事"
"务。更具体地说，他们同意每次竞争的获胜者。因此，永远不会有双花发生。最大"
"的威胁是找到有多个验证者服务的复合命名空间。幸运的是，您可以看到命名空间"
"背后的验证者的多少，由此决定是否信任该命名空间。"

#: ../../contracts/namespaces.rst:42
msgid ""
"We have established that two processes must share a named channel to "
"communicate, but what if multiple processes share the same channel? "
"Transactional nondeterminism is introduced under two general conditions "
"which render a resource contentious and susceptible to race conditions:"
msgstr ""
"我们已经明确两个进程必须共享一个指定的通道进行通信，但是如果多个进程共享"
"相同的通道呢？事务的不确定性是在两个一般条件下引入的，导致资源有争议并容"
"易受到竞争条件的影响："

#: ../../contracts/namespaces.rst:49
msgid ""
"The first race condition occurs when multiple clients in parallel "
"composition compete to *receive* a data resource on a named channel. In "
"this case :code:`P1` and :code:`P2` , are waiting, on the named channel :"
"code:`x`,  for the resource :code:`@Q` being sent on :code:`x` by "
"another process. The clients will execute their continuations if and "
"only if the correct value is witnessed at that location. In other cases "
"where many clients are competing, many reductions may be possible, but, "
"in this case, only one of two may result. One where :code:`P1` receives :"
"code:`@Q` first and one where :code:`P2` receives :code:`@Q` first, both "
"of which may return different results when :code:`@Q` is substituted "
"into their respective protocol bodies."
msgstr ""
"第一种竞争条件发生在多个并行组合的客户端在命名通道上竞争 *接受* 数据资源"
"时。在这种情况下， :code:`P1` 和 :code:`P2` 在命名通道 :code:`x` 等待由另"
"一个进程中由 :code:`x` 发送的资源 :code:`@Q` 。当且仅当在该位置处看到正确"
"的值时，客户端才会执行其附加部分代码。在其他情况下，许多客户处于竞争中，"
"可能存在许多归约，但是在这种情况下，两个中只有一个可能会成立。其中之一"
"是 :code:`P1` 首先接收 :code:`@Q` ，另一个是 :code:`P2` 首先接收到 :code:"
"`@Q` ，这两者在 :code:`@Q` 代入到他们各自的协议中都可能会返回不同的结果。"

#: ../../contracts/namespaces.rst:56
msgid ""
"The second race condition occurs when two clients compete to *send* a "
"data resource on a named channel. In this case, two clients are each "
"competing to send a data resource :code:`@Q` to the client at the named "
"channel :code:`x`, but only one of two transactions may occur - one "
"where the receiving client receives :code:`@Q1` first and one where it "
"receives :code:`@Q2` first, both of which may return different results "
"when substituted into the protocol body of :code:`P`."
msgstr ""
"第二种竞争条件发生在当两个客户端竞争一个命名通道以发送一个数据资源时。在"
"这种情况下，两个客户端在命名通道 :code:`x` 处竞争，向客户端发送数据资源 :"
"code:`@Q` ，但是以下两个事务中的只有一个可能发生，一个是接收客户端首先接"
"收 :code:`@Q1` ，另一个是先收到 :code:`@Q2`，两者在代入到 :code:`P` 的协"
"议体重可能返回不同的结果。"

#: ../../contracts/namespaces.rst:58
msgid ""
"For protocols which compete for resources, this level of nondeterminism "
"is unavoidable. Later, in the section on consensus, we will describe how "
"the consensus algorithm maintains replicated state by converging on one "
"of the many possible transaction occurrences in a nondeterministic "
"process. For now, observe how simply redefining a name constrains "
"reduction in the first race condition:"
msgstr ""
"对于竞争资源的协议，这种水平的不确定性是不可避免的。之后，在共识那一节，"
"我们将描述共识算法如何通过将非确定进程中发生的多个可能的交易收敛到一个可"
"维护复制状态。 现在来看看在第一个竞争条件下重新定义名称约束规约是多么简单"
"的事："

#: ../../contracts/namespaces.rst:65
msgid "--and the second race condition:"
msgstr "—第二个竞争条件"

#: ../../contracts/namespaces.rst:72
msgid ""
"In both cases, the channel, and the data resource being communicated, is "
"no longer contentious simply because they are now communicating over two "
"distinct, named channels. In other words, they are in separate "
"namespaces. Additionally, names are provably unguessable, so they can "
"only be acquired when a discretionary external process gives them. "
"Because a name is unguessable, a resource is only visible to the "
"processes/contracts that have knowledge of that name [5]_. Hence, sets "
"of processes that execute over non-conflicting sets of named channels i."
"e sets of transactions that execute in separate namespaces, may execute "
"in parallel, as demonstrated below:"
msgstr ""
"在这两种情况下，通道和正在传输的数据资源都不再是有争议的，因为它们现在正"
"在通过两个不同的命名通道中进行通信。 换句话说，它们在不同的命名空间中。 "
"另外，名字是可证明不可猜测的，所以只有当存在一个任意的外部过程给出时，其"
"他进程才能获得。因为一个名字是不可猜测的，所以一个资源只对知道这个名字的"
"进程/合约才可见[5]_。 因此，在非冲突的命名通道集合上执行的一组进程（比如"
"在分开的命名空间中执行的事务集合）可以被并行执行，如下所示："

#: ../../contracts/namespaces.rst:81
msgid ""
"The set of transactions executing in parallel in the namespace :code:"
"`x`, and the set of transactions executing in the namespace :code:`v`, "
"are double-blind; they are anonymous to each other unless introduced by "
"an auxillary process. Both sets of transactions are communicating the "
"same resource, :code:`@Q`, and even requiring that :code:`@Q` meets the "
"same :code:`ptrn`, yet no race conditions arise because each output has "
"a single input counter-part, and the transactions occur in separate "
"namespaces. This approach to isolating sets of process/contract "
"interactions essentially partitions RChain’s address space into many "
"independent transactional environments, each of which are internally "
"concurrent and may execute in parallel with one another."
msgstr ""
"在名称空间 :code:`x` 中并行执行的一组事务，以及在名称空间 :code:`v` 中执"
"行的一组事务是双盲的; 除非由辅助过程引入，否则它们是相互匿名的。 两组事务"
"都在传递相同的资源 :code:`@Q` ，甚至要求 :code:`@Q` 满足相同的 :code:"
"`ptrn` ，但是没有竞争条件，因为每个输出都有一个单独的输入副本，事务发生在"
"不同的命名空间中。这种隔离进程/合约交互集的方法基本上将RChain的地址空间分"
"割成许多独立的事务环境，每个环境都是内部并发的，并且可以相互并行执行。"

#: ../../contracts/namespaces.rst:93
msgid ""
"Still, in this representation, the fact remains that resources are "
"visible to processes/contracts which know the name of a channel and "
"satisfy a pattern match. After partitioning the address space into a "
"multiplex of isolated transactional environments, how do we further "
"refine the type of process/contract that can interact with a resource in "
"a similar environment? -- under what conditions, and to what extent, may "
"it do so? For that we turn to definitions."
msgstr ""
"在这种表示中，该性质仍然保持成立，资源对那些知道通道名称并且满足模式的进"
"程/合约可见。 将地址空间划分为独立事务环境的一个多路复用后，我们如何进一"
"步细化可以在类似环境中与资源进行交互的进程/合约的类型？以及在什么条件、在"
"什么程度上可以这样做？ 为此，我们开始进行定义。"

#: ../../contracts/namespaces.rst:96
msgid "Namespace Definitions"
msgstr "命名空间定义"

#: ../../contracts/namespaces.rst:97
msgid ""
"**A namespace definition is a formulaic description of the minimum "
"conditions required for a process/contract to function in a namespace.** "
"In point of fact, the consistency of a namespace is immediately and "
"exclusively dependent on how that space defines a name, which may vary "
"greatly depending on the intended function of the contracts the "
"namespace definition describes."
msgstr ""
"**命名空间的一个定义是进程/合约在一个命名空间中运行所需的最低条件的形式化"
"描述。** 事实上，命名空间的一致性直接并唯一地依赖于该空间如何定义一个名"
"称，根据命名空间定义所描述的合约的预期功能，这可能会有很大的不同。"

#: ../../contracts/namespaces.rst:99
msgid ""
"A name satisfies a definition, or it does not; it functions, or it does "
"not. The following namespace definition is implemented as an ‘if "
"conditional’ in the interaction which depicts a set of processes sending "
"a set of contracts to a set of named addresses that comprise a namespace:"
msgstr ""
"命名和功能都可能满足或不满足定义。以下命名空间定义在交互中实现为“if条"
"件”，它描述了一组进程将一组合约发送到一组命名地址，这些命名地址组成了一个"
"命名空间："

#: ../../contracts/namespaces.rst:112
msgid ""
"A set of contracts, :code:`contract1...contractn` , are sent to the set "
"of channels (namespace) :code:`address1...addressn`."
msgstr ""
"一组合约， :code:`contract1…contractn` 被发送到一组通道(命名空间)，即 :"
"code:`address1…addressn`."

#: ../../contracts/namespaces.rst:114
msgid ""
"In parallel, a process listens for input on every channel in the :code:"
"`address` namespace."
msgstr "一个进程并行地监听命名空间 :code:`address` 中每个通道的输入。"

#: ../../contracts/namespaces.rst:116
msgid ""
"When a contract is received on any one of the channels, it is supplied "
"to :code:`if cond.`, which checks the namespace origin, the address of "
"sender, the behavior of the contract, the structure of the contract, as "
"well as the size of data the contract carries."
msgstr ""
"当任一通道上收到一个合约时，它被提供给 :code:`if cond.`，检查命名空间的源"
"点、发送者的地址、合约的行为、合约的接口以及合约所携带的数据大小。"

#: ../../contracts/namespaces.rst:118
msgid ""
"If those properties are consistent with those denoted by the :code:"
"`address` namespace definition, continuation :code:`P` is executed with :"
"code:`contract` as its argument."
msgstr ""
"如果这些性质与命名空间 :code:`address` 的定义相一致，:code:`P` 将会被执"
"行，并将 :code:`contract` 作为它的参数。"

#: ../../contracts/namespaces.rst:120
msgid ""
"A namespace definition effectively bounds the types of interactions that "
"may occur in a namespace - with every contract existing in the space "
"demonstrating a common and predictable behavior. That is, the state "
"alterations invoked by a contract residing in a namespace are "
"necessarily authorized, defined, and correct for that namespace. This "
"design choice makes fast datalog-style queries against namespaces very "
"convenient and exceedingly useful."
msgstr ""
"命名空间定义有效地限制了命名空间中可能发生的交互类型——空间中存在的每个契"
"约都展示出一种常见可预测的行为。也就是说，驻留在名称空间中的合同所调用的"
"状态更改操作都必须经过授权，定义并且对该名称空间是正确的。这种设计选择使"
"在命名空间上的目录式快速查询非常方便有效。"

#: ../../contracts/namespaces.rst:122
msgid ""
"A namespace definition may control the interactions that occur in the "
"space, for example, by specifying:"
msgstr "命名空间定义也可以控制在空间中发生的交互，比如说，通过制定"

#: ../../contracts/namespaces.rst:124
msgid "Accepted Addresses"
msgstr "接受的地址"

#: ../../contracts/namespaces.rst:125
msgid "Accepted Namespaces"
msgstr "接受的命名空间"

#: ../../contracts/namespaces.rst:126
msgid "Accepted Behavioral Types"
msgstr "接受的行为类型"

#: ../../contracts/namespaces.rst:127
msgid "Max/Min Data Size"
msgstr "数据大小的最大最小值"

#: ../../contracts/namespaces.rst:128
msgid "I/O Structure"
msgstr "I/O结构"

#: ../../contracts/namespaces.rst:130
msgid ""
"A definition may, and often will, specify a set of accepted namespaces "
"and addresses which can communicate with the agents it defines."
msgstr ""
"定义可能，并且一般都会指定一组可接受的命名空间和地址，这些名称空间和地址"
"可以与其定义的代理进行通信。"

#: ../../contracts/namespaces.rst:132
msgid ""
"Note the check against behavioral types in the graphic above. This "
"exists to ensure that the sequence of operations expressed by the "
"contract is consistent with the safety specification of the namespace. "
"Behavioral type checks may evaluate properties of liveness, termination, "
"deadlock freedom, and resource synchronization - all properties which "
"ensure maximally “safe” state alterations of the resources within the "
"namespace. Because behavioral types denote operational sequencing, the "
"behavioral type criteria may specify post-conditions of the contract, "
"which may, in turn, satisfy the preconditions of a subsequent namespace. "
"As a result, the namespace framework supports the safe composition, or "
"\"chaining\" together, of transactional environments."
msgstr ""
"请注意上图中针对行为类型的检查。这是为了确保合约所表达的操作串与命名空间"
"的安全规范一致。行为类型检查可以用来评估可用性，边界，有无死锁和资源同步"
"等特性，这些特性最大程度上保证了命名空间中资源上的“安全”地改变状态。因为"
"行为类型意味着操作排序，所以行为类型条件可以指定合约的后置条件，这又可以"
"满足后续命名空间的先决条件。因此，名称空间架构支持事务环境的安全组合，"
"或“链接”在一起。"

#: ../../contracts/namespaces.rst:135
msgid "Composable Namespaces - Resource Addressing"
msgstr "可组合的命名空间 - 资源寻址"

#: ../../contracts/namespaces.rst:136
msgid ""
"Until this point, we’ve described named channels as flat, atomic "
"entities of arbitrary breadth. With reflection, and internal structure "
"on named channels, we achieve depth."
msgstr ""
"在此之前，我们已经将命名通道描述为任意宽度的扁平实体。通过命名渠道的反射"
"和内部结构，实现深度。"

#: ../../contracts/namespaces.rst:138
msgid ""
"A namespace can be thought of as a URI (Uniform Resource Identifier), "
"while the address of a resource can be thought of as a URL (Uniform "
"Resource Locator). The path component of the URL, :code:`scheme://a/b/"
"c`, for example, may be viewed as equivalent to an RChain address. That "
"is, a series of nested channels that each take messages, with the named "
"channel, :code:`a`, being the “top” channel."
msgstr ""
"一个名字空间可以被认为是一个URI（统一资源标识符），而一个资源的地址可以被"
"认为是一个URL（统一资源定位符）。 例如，URL的路径部分 :code:`scheme://a/"
"b/c`，可以被视为等同于一个RChain地址。 也就是说，一系列嵌套通道，每个通道"
"都可以携带消息，其中命名通道 :code:`a` 是“顶部”通道。"

#: ../../contracts/namespaces.rst:140
msgid ""
"Observe, however, that URL paths do not always compose. Take :code:"
"`scheme://a/b/c` and :code:`scheme://a/b/d`. In a traditional URL "
"scheme, the two do not compose to yield a path. However, every flat path "
"is automatically a tree path, and, as trees, these *do* compose to yield "
"a new tree :code:`scheme://a/b/c+d`. Therefore, trees afford a "
"composable model for resource addressing."
msgstr ""
"但是请注意，URL路径并不是都可以组成的。例如 :code:`scheme://a/b/c` 和 :"
"code:`scheme://a/b/d`, 在传统的URL方案中，这两者不能通过组合生成一条路"
"径。然而，每一个平坦路径都自动是树路径，并且，作为树，这些*可以*组合产生"
"新的树 :code:`scheme://a/b/c+d` 。 因此，树为资源寻址提供了一个可组合的模"
"型。"

#: ../../contracts/namespaces.rst:148
msgid "Figure - Composable Tree Paths"
msgstr "图-可组合的树路径"

#: ../../contracts/namespaces.rst:151
msgid ""
"Above, unification works as a natural algorithm for matching and "
"decomposing trees, and unification-based matching and decomposition "
"provides the basis of query. To explore this claim let us rewrite our "
"path/tree syntax in this form:"
msgstr ""
"以上，统一可以作为一种树匹配和分解的算法，而基于统一的匹配和分解为查询提"
"供了基础。 为了探索这个想法，让我们用这种形式重写路径/树的语法："

#: ../../contracts/namespaces.rst:158
msgid "Then adapt syntax to the I/O actions of the rho-calculus:"
msgstr "然后将语法调整为rho演算的I/O操作："

#: ../../contracts/namespaces.rst:167
msgid ""
"The top expression denotes output - place the resource address :code:"
"`a(b(c,d)` at the named channel :code:`s`. The bottom expression denotes "
"input. For the pattern that matches the form :code:`a(b(c,d))`, coming "
"in on channel :code:`s`, if some precondition is met, execute "
"continuation :code:`P`, with the address :code:`a(b(c,d)` as an "
"argument. Of course, this expression implicates :code:`s`, as a named "
"channel. So the adapted channel structure is represented:"
msgstr ""
"最上面的表达式表示输出—将资源地址 :code:`a(b(c,d)` 放在命名通道 :code:"
"`s` 。下面的表达式表示输入。对于匹配形如 :code:`a(b(c,d))` 的模式，输入信"
"道为 :code:`s`，如果满足一些前提条件，执行后续部分 :code:`P`，以地址 :"
"code:`a(b(c,d)` 作为一个参数。当然，这个表达式暗示 :code:`s` 是一个命名信"
"道。所以调整的通道结构可表示为："

#: ../../contracts/namespaces.rst:175
msgid "Figure - URL Scheme as Nested Channels in Tree Structure"
msgstr "图：树结构中嵌套通道的URL方案"

#: ../../contracts/namespaces.rst:178
msgid ""
"Given an existing address structure, and namespace access, a client may "
"query for and send to names within that address structure. For example, "
"when the rho-calculus I/O processes are placed in concurrent execution, "
"the following expression denotes a function that places the quoted "
"processes, :code:`(@Q,@R)` at the location, :code:`a(b(c,d))`:"
msgstr ""
"鉴于现有的地址结构和命名空间访问逻辑，客户端可以查询并发送到该地址结构中"
"的名称。 例如，当rho-演算的I/O进程被放置在并发执行环境中时，下面的表达式"
"表示一个将被引用的进程 :code:`(@Q,@R)` 放到位置 :code:`a(b(c,d))` ："

#: ../../contracts/namespaces.rst:185
msgid "The evaluation step is written symbolically:"
msgstr "求值过程可以被符号化地写为:"

#: ../../contracts/namespaces.rst:192
msgid ""
"That is, :code:`P` is executed in an environment in which :code:`c` is "
"substituted for :code:`@Q`, and :code:`d` is substituted for :code:`@R`. "
"The updated tree structure is represented as follows:"
msgstr ""
"也就是说，:code:`P` 是在某个环境下执行的，其中 :code:`c` 用于代替 :code:"
"`@Q` ， :code:`d` 用于替换 :code:`@R` 。更新后的树结构如下所示："

#: ../../contracts/namespaces.rst:200
msgid "Figure - Placing Processes at Channels"
msgstr "图：在通道中放置进程"

#: ../../contracts/namespaces.rst:203
msgid ""
"In addition to a flat set of channels e.g :code:`s1...sn` qualifying as "
"a namespace, every channel with internal structure is, in itself, a "
"namespace. Therefore, :code:`s`, :code:`a`, and :code:`b` may "
"incrementally impose individual namespace definitions analogous to those "
"given by a flat namespace. In practice, the internal structure of a "
"named channel is an n-ary tree of arbitrary depth and complexity where "
"the \"top\" channel, in this case :code:`s`, is but one of many possible "
"names in :code:`s1...sn` that possess internal structure."
msgstr ""
"除了有资格成为命名空间的平面通道集合外（例如 :code:`s1…sn` ），每个具有内"
"部结构的通道本身就是一个命名空间。 因此， :code:`s` ， :code:`a` 和 :"
"code:`b` 可以递增地施加单独的命名空间定义，类似于由平面命名空间给出的命名"
"空间定义。 在实践中，命名通道的内部结构是一个任意深度和复杂度的n元树，其"
"中“顶部”通道（在本例中为 :code:`s`）只是 :code:`s1...sn` 中这些拥有内部结"
"构的众多可能的名称之一。"

#: ../../contracts/namespaces.rst:205
msgid ""
"This resource addressing framework represents a step-by-step adaptation "
"to what is the most widely used internet addressing standard in history. "
"RChain achieves the compositional address space necessary for private, "
"public, and consortium visibility by way of namespaces, but the obvious "
"use-case addresses scalability. Not by chance, and not surprisingly, "
"namespaces also offer a framework for RChain’s sharding solution."
msgstr ""
"该资源寻址框架代表了对历史上使用最广泛的互联网寻址标准的一步步适应。 "
"RChain通过命名空间实现了私有、公共以及联盟可见性所需的组合地址空间，但显"
"而易见的用例是解决可伸缩性。绝非偶然，也不意外，命名空间也将为RChain的分"
"片解决方案提供了一个框架。"

#: ../../contracts/namespaces.rst:208
msgid "Namespace Logic - A Logic for a Reflective Higher-Order Calculus."
msgstr "命名空间逻辑-适用于高阶反射演算的逻辑"
